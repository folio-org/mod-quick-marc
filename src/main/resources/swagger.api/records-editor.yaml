openapi: 3.0.0
info:
  title: quickMARC Record Editor
  version: '4.0'
servers:
  - url: /records-editor/
paths:
  /records:
    get:
      description: Get MARC record by externalId
      operationId: getRecordByExternalId
      parameters:
        - name: externalId
          in: query
          required: true
          description: UUID of the external that is related to the MARC record
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: MARC record successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/quickMarc'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'

    post:
      description: Create MARC record
      operationId: postRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quickMarc'
        required: true
      responses:
        '201':
          description: MARC Record created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actionStatusDto'
        '400':
          $ref: '#/components/responses/badRequestResponse'

  /records/{id}:
    put:
      description: Edit MARC record
      operationId: putRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/quickMarc'
        required: true
      parameters:
        - name: id
          in: path
          required: true
          schema:
            '$ref': '#/components/schemas/UUID'
          description: The UUID of a record
      responses:
        '202':
          description: MARC record accepted for updating
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actionStatusDto'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'
        '422':
          $ref: '#/components/responses/unprocessableEntityResponse'
        '409':
          description: Update failed due to optimistic locking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    delete:
      description: Delete MARC record by externalId
      operationId: deleteRecordByExternalId
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the external that is related to the MARC record
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          description: MARC record successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actionStatusDto'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'

  /records/status:
    get:
      description: Get status of action
      operationId: getActionStatus
      parameters:
        - name: actionId
          in: query
          required: true
          description: UUID of action
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: Status of MARC bibliographic record creation successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/actionStatusDto'
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundResponse'

components:
  schemas:
    quickMarc:
      $ref: schemas/quickMarc.json
    actionStatusDto:
      $ref: schemas/actionStatusDto.json
    error:
      type: object
    errors:
      type: object
    UUID:
      type: string
      format: uuid
    parsedRecordDto:
      $ref: schemas/external/parsedRecordDto.json
    initJobExecutionsRqDto:
      $ref: schemas/external/initJobExecutionsRqDto.json
    initJobExecutionsRsDto:
      $ref: schemas/external/initJobExecutionsRsDto.json
    rawRecordsDto:
      $ref: schemas/external/rawRecordsDto.json
    marcFieldProtectionSettingsCollection:
      $ref: schemas/external/marcFieldProtectionSettingsCollection.json
    dataImportEventPayload:
      $ref: schemas/external/dataImportEventPayload.json

  responses:
    badRequestResponse:
      description:
        Bad request, e.g. malformed request body or query parameter.
        Details of the error (e.g. name of the parameter or line/character number
        with malformed data) provided in the response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    notFoundResponse:
      description: Record with a given ID not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    unprocessableEntityResponse:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errors'
